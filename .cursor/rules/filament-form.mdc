---
alwaysApply: true
---
# Filament v4 Complete Guide - Part 3: Form System

## Form System

### Overview

**v4 Form System Features:**

- Responsive forms based on Livewire 3
- Supports real-time validation and error handling
- Rich field types and validation options
- Highly customizable styles and behavior
- Supports conditional fields and dynamic forms

## Basic Field Components

### Text Input

**Features:**

- Supports multiple input types: text, email, password, number, tel, url
- Real-time validation and error display
- Supports prefix, suffix, and icons
- Autocomplete and suggestion functionality
- Supports masked input

**Example Code:**

```php

use Filament\\Forms\\Components\\TextInput;

TextInput::make('name')

Â  Â  ->label('Full Name')

Â  Â  ->required()

Â  Â  ->maxLength(255)

Â  Â  ->minLength(2)

Â  Â  ->unique(ignoreRecord: true)

Â  Â  ->placeholder('Enter your full name')

Â  Â  ->prefix('ðŸ‘¤')

Â  Â  ->suffix('@example.com')

Â  Â  ->helperText('Enter your first and last name')

Â  Â  ->live(onBlur: true)

Â  Â  ->afterStateUpdated(function ($state, $set) {

Â  Â  Â  Â  $set('slug', Str::slug($state));

Â  Â  });

```

### Select

**Features:**

- Supports option arrays and relationship queries
- Search and filter functionality
- Grouped options support
- Multi-select and single-select modes
- Custom option rendering

**Example Code:**

```php

use Filament\\Forms\\Components\\Select;

Select::make('status')

Â  Â  ->options([

Â  Â  Â  Â  'draft' => 'Draft',

Â  Â  Â  Â  'published' => 'Published',

Â  Â  Â  Â  'archived' => 'Archived',

Â  Â  ])

Â  Â  ->required()

Â  Â  ->searchable()

Â  Â  ->preload()

Â  Â  ->native(false)

Â  Â  ->placeholder('Select a status')

Â  Â  ->default('draft');

// Relationship selector

Select::make('user_id')

Â  Â  ->relationship('user', 'name')

Â  Â  ->searchable()

Â  Â  ->preload()

Â  Â  ->createOptionForm([

Â  Â  Â  Â  TextInput::make('name')->required(),

Â  Â  Â  Â  TextInput::make('email')->email()->required(),

Â  Â  ]);

```

### Checkbox

**Features:**

- Single checkbox and checkbox lists
- Custom labels and descriptions
- Conditional display and validation
- Supports boolean and array values

**Example Code:**

```php

use Filament\\Forms\\Components\\Checkbox;

use Filament\\Forms\\Components\\CheckboxList;

Checkbox::make('terms')

Â  Â  ->label('I agree to the terms and conditions')

Â  Â  ->required()

Â  Â  ->accepted();

CheckboxList::make('permissions')

Â  Â  ->options([

Â  Â  Â  Â  'read' => 'Read',

Â  Â  Â  Â  'write' => 'Write',

Â  Â  Â  Â  'delete' => 'Delete',

Â  Â  Â  Â  'admin' => 'Administrator',

Â  Â  ])

Â  Â  ->columns(2)

Â  Â  ->required();

```

### Toggle

**Features:**

- Boolean toggle switch
- Custom toggle labels
- Supports inline and block-level display
- Custom colors and styles

**Example Code:**

```php

use Filament\\Forms\\Components\\Toggle;

Toggle::make('is_active')

Â  Â  ->label('Active Status')

Â  Â  ->onIcon('heroicon-s-check')

Â  Â  ->offIcon('heroicon-s-x-mark')

Â  Â  ->onColor('success')

Â  Â  ->offColor('danger')

Â  Â  ->inline(false)

Â  Â  ->default(true);

```

### Radio

**Features:**

- Radio button groups
- Supports vertical and horizontal layouts
- Custom option rendering
- Conditional display and validation

**Example Code:**

```php

use Filament\\Forms\\Components\\Radio;

Radio::make('notification_type')

Â  Â  ->options([

Â  Â  Â  Â  'email' => 'Email notifications',

Â  Â  Â  Â  'sms' => 'SMS notifications',

Â  Â  Â  Â  'push' => 'Push notifications',

Â  Â  Â  Â  'none' => 'No notifications',

Â  Â  ])

Â  Â  ->columns(2)

Â  Â  ->default('email');

```

### Date Time Picker

**Features:**

- Date, time, and datetime selection
- Custom formats and localization
- Range selection support
- Timezone handling

**Example Code:**

```php

use Filament\\Forms\\Components\\DateTimePicker;

use Filament\\Forms\\Components\\DatePicker;

use Filament\\Forms\\Components\\TimePicker;

DateTimePicker::make('published_at')

Â  Â  ->label('Publish Date & Time')

Â  Â  ->displayFormat('M j, Y g:i A')

Â  Â  ->native(false)

Â  Â  ->seconds(false)

Â  Â  ->timezone('UTC');

DatePicker::make('birth_date')

Â  Â  ->label('Date of Birth')

Â  Â  ->native(false)

Â  Â  ->maxDate(now())

Â  Â  ->displayFormat('M j, Y');

```

### File Upload

**Features:**

- Single and multiple file upload
- Supports drag and drop upload
- File type validation
- Image preview and cropping
- Cloud storage support

**Example Code:**

```php

use Filament\\Forms\\Components\\FileUpload;

FileUpload::make('avatar')

Â  Â  ->label('Profile Picture')

Â  Â  ->image()

Â  Â  ->imageEditor()

Â  Â  ->imageCropAspectRatio('1:1')

Â  Â  ->imageResizeTargetWidth('192')

Â  Â  ->imageResizeTargetHeight('192')

Â  Â  ->directory('avatars')

Â  Â  ->maxSize(5120)

Â  Â  ->acceptedFileTypes(['image/jpeg', 'image/png', 'image/webp']);

FileUpload::make('documents')

Â  Â  ->label('Documents')

Â  Â  ->multiple()

Â  Â  ->maxFiles(5)

Â  Â  ->acceptedFileTypes(['application/pdf', 'application/msword'])

Â  Â  ->maxSize(10240);

```

## Advanced Field Components

### Rich Editor

**Features:**

- TipTap-based rich text editor
- Customizable toolbar buttons
- Supports images, links, and tables
- Real-time collaboration support
- Custom content validation

**Example Code:**

```php

use Filament\\Forms\\Components\\RichEditor;

RichEditor::make('content')

Â  Â  ->label('Article Content')

Â  Â  ->toolbarButtons([

Â  Â  Â  Â  'bold',

Â  Â  Â  Â  'italic',

Â  Â  Â  Â  'underline',

Â  Â  Â  Â  'strike',

Â  Â  Â  Â  'link',

Â  Â  Â  Â  'bulletList',

Â  Â  Â  Â  'orderedList',

Â  Â  Â  Â  'h2',

Â  Â  Â  Â  'h3',

Â  Â  Â  Â  'blockquote',

Â  Â  Â  Â  'codeBlock',

Â  Â  Â  Â  'table',

Â  Â  ])

Â  Â  ->fileAttachmentsDisk('public')

Â  Â  ->fileAttachmentsDirectory('uploads')

Â  Â  ->fileAttachmentsVisibility('public')

Â  Â  ->columnSpanFull();

```

### Markdown Editor

**Features:**

- Supports Markdown syntax
- Real-time preview
- Syntax highlighting
- Custom toolbar
- File attachment support

**Example Code:**

```php

use Filament\\Forms\\Components\\MarkdownEditor;

MarkdownEditor::make('description')

Â  Â  ->label('Description')

Â  Â  ->toolbarButtons([

Â  Â  Â  Â  'bold',

Â  Â  Â  Â  'italic',

Â  Â  Â  Â  'link',

Â  Â  Â  Â  'bulletList',

Â  Â  Â  Â  'orderedList',

Â  Â  Â  Â  'h2',

Â  Â  Â  Â  'h3',

Â  Â  Â  Â  'blockquote',

Â  Â  Â  Â  'codeBlock',

Â  Â  ])

Â  Â  ->fileAttachmentsDisk('public')

Â  Â  ->fileAttachmentsDirectory('uploads');

```

### Repeater

**Features:**

- Dynamic add/remove field groups
- Supports nested repeaters
- Custom item labels
- Conditional display and validation

**Example Code:**

```php

use Filament\\Forms\\Components\\Repeater;

Repeater::make('phone_numbers')

Â  Â  ->schema([

Â  Â  Â  Â  Select::make('type')

Â  Â  Â  Â  Â  Â  ->options([

Â  Â  Â  Â  Â  Â  Â  Â  'mobile' => 'Mobile',

Â  Â  Â  Â  Â  Â  Â  Â  'home' => 'Home',

Â  Â  Â  Â  Â  Â  Â  Â  'work' => 'Work',

Â  Â  Â  Â  Â  Â  ])

Â  Â  Â  Â  Â  Â  ->required(),

Â  Â  Â  Â  TextInput::make('number')

Â  Â  Â  Â  Â  Â  ->tel()

Â  Â  Â  Â  Â  Â  ->required(),

Â  Â  ])

Â  Â  ->defaultItems(1)

Â  Â  ->reorderableWithButtons()

Â  Â  ->collapsible();

```

### Builder

**Features:**

- Dynamic content block building
- Drag and drop sorting
- Custom block types
- Conditional display and validation

**Example Code:**

```php

use Filament\\Forms\\Components\\Builder;

Builder::make('content_blocks')

Â  Â  ->blocks([

Â  Â  Â  Â  Builder\\Block::make('text')

Â  Â  Â  Â  Â  Â  ->schema([

Â  Â  Â  Â  Â  Â  Â  Â  TextInput::make('title')->required(),

Â  Â  Â  Â  Â  Â  Â  Â  RichEditor::make('content')->required(),

Â  Â  Â  Â  Â  Â  ]),

Â  Â  Â  Â  Builder\\Block::make('image')

Â  Â  Â  Â  Â  Â  ->schema([

Â  Â  Â  Â  Â  Â  Â  Â  TextInput::make('title')->required(),

Â  Â  Â  Â  Â  Â  Â  Â  FileUpload::make('image')->image()->required(),

Â  Â  Â  Â  Â  Â  Â  Â  TextInput::make('alt_text'),

Â  Â  Â  Â  Â  Â  ]),

Â  Â  Â  Â  Builder\\Block::make('video')

Â  Â  Â  Â  Â  Â  ->schema([

Â  Â  Â  Â  Â  Â  Â  Â  TextInput::make('title')->required(),

Â  Â  Â  Â  Â  Â  Â  Â  TextInput::make('video_url')->url()->required(),

Â  Â  Â  Â  Â  Â  ]),

Â  Â  ])

Â  Â  ->collapsible();

```

### Tags Input

**Features:**

- Dynamic tag add/remove
- Autocomplete suggestions
- Custom separators
- Tag validation

**Example Code:**

```php

use Filament\\Forms\\Components\\TagsInput;

TagsInput::make('tags')

Â  Â  ->label('Article Tags')

Â  Â  ->separator(',')

Â  Â  ->suggestions([

Â  Â  Â  Â  'laravel',

Â  Â  Â  Â  'filament',

Â  Â  Â  Â  'php',

Â  Â  Â  Â  'javascript',

Â  Â  Â  Â  'vue',

Â  Â  Â  Â  'react',

Â  Â  ])

Â  Â  ->maxTags(10);

```

### Textarea

**Features:**

- Multi-line text input
- Auto-adjusting height
- Character count
- Custom row count

**Example Code:**

```php

use Filament\\Forms\\Components\\Textarea;

Textarea::make('description')

Â  Â  ->label('Description')

Â  Â  ->rows(5)

Â  Â  ->cols(50)

Â  Â  ->maxLength(1000)

Â  Â  ->characterCount()

Â  Â  ->placeholder('Enter a detailed description...');

```

### Key Value

**Features:**

- Dynamic key-value pair input
- Custom key and value validation
- Supports nested structures
- Bulk operations

**Example Code:**

```php

use Filament\\Forms\\Components\\KeyValue;

KeyValue::make('metadata')

Â  Â  ->label('Custom Metadata')

Â  Â  ->keyLabel('Property')

Â  Â  ->valueLabel('Value')

Â  Â  ->keyPlaceholder('Enter property name')

Â  Â  ->valuePlaceholder('Enter property value')

Â  Â  ->addActionLabel('Add Property')

Â  Â  ->columnSpanFull();

```

### Color Picker

**Features:**

- Color selection and preview
- Supports multiple color formats
- Preset color options
- Custom color palette

**Example Code:**

```php

use Filament\\Forms\\Components\\ColorPicker;

ColorPicker::make('theme_color')

Â  Â  ->label('Theme Color')

Â  Â  ->default('#3B82F6')

Â  Â  ->format('hex')

Â  Â  ->presetColors([

Â  Â  Â  Â  '#3B82F6', // Blue

Â  Â  Â  Â  '#EF4444', // Red

Â  Â  Â  Â  '#10B981', // Green

Â  Â  Â  Â  '#F59E0B', // Yellow

Â  Â  Â  Â  '#8B5CF6', // Purple

Â  Â  ]);

```

### Toggle Buttons

**Features:**

- Button group style selector
- Supports single and multi-select
- Custom button styles
- Icon and label support

**Example Code:**

```php

use Filament\\Forms\\Components\\ToggleButtons;

ToggleButtons::make('status')

Â  Â  ->options([

Â  Â  Â  Â  'draft' => 'Draft',

Â  Â  Â  Â  'published' => 'Published',

Â  Â  Â  Â  'archived' => 'Archived',

Â  Â  ])

Â  Â  ->colors([

Â  Â  Â  Â  'draft' => 'gray',

Â  Â  Â  Â  'published' => 'success',

Â  Â  Â  Â  'archived' => 'danger',

Â  Â  ])

Â  Â  ->icons([

Â  Â  Â  Â  'draft' => 'heroicon-o-pencil',

Â  Â  Â  Â  'published' => 'heroicon-o-check-circle',

Â  Â  Â  Â  'archived' => 'heroicon-o-archive-box',

Â  Â  ])

Â  Â  ->inline();

```

### Slider

**Features:**

- Numeric range selection
- Custom step and range
- Real-time value display
- Custom labels

**Example Code:**

```php

use Filament\\Forms\\Components\\Slider;

Slider::make('rating')

Â  Â  ->label('Rating')

Â  Â  ->minValue(1)

Â  Â  ->maxValue(5)

Â  Â  ->step(0.5)

Â  Â  ->displaySteps(5)

Â  Â  ->default(3);

```

### Code Editor

**Features:**

- Syntax highlighting support
- Multiple programming languages
- Autocomplete
- Line number display

**Example Code:**

```php

use Filament\\Forms\\Components\\CodeEditor;

CodeEditor::make('custom_css')

Â  Â  ->label('Custom CSS')

Â  Â  ->language('css')

Â  Â  ->minHeight(200)

Â  Â  ->maxHeight(500);

```

### Hidden

**Features:**

- Hidden form fields
- Used for storing calculated values or default values
- Supports dynamic value setting

**Example Code:**

```php

use Filament\\Forms\\Components\\Hidden;

Hidden::make('user_id')

Â  Â  ->default(fn () => auth()->id());

Hidden::make('created_at')

Â  Â  ->default(now());

```

## Validation System

**Features:**

- Supports all Laravel validation rules
- Real-time validation and error display
- Custom validation messages
- Conditional validation
- Cross-field validation

**Example Code:**

```php

TextInput::make('email')

Â  Â  ->email()

Â  Â  ->required()

Â  Â  ->unique(table: User::class, column: 'email', ignoreRecord: true)

Â  Â  ->rules([

Â  Â  Â  Â  'email',

Â  Â  Â  Â  'max:255',

Â  Â  Â  Â  Rule::unique('users', 'email')->ignore($this->record),

Â  Â  ])

Â  Â  ->validationMessages([

Â  Â  Â  Â  'email.required' => 'Email address is required.',

Â  Â  Â  Â  'email.email' => 'Please enter a valid email address.',

Â  Â  Â  Â  'email.unique' => 'This email address is already taken.',

Â  Â  ]);

// Conditional validation

TextInput::make('password')

Â  Â  ->password()

Â  Â  ->required(fn ($get) => $get('change_password'))

Â  Â  ->minLength(8)

Â  Â  ->confirmed();

TextInput::make('password_confirmation')

Â  Â  ->password()

Â  Â  ->required(fn ($get) => $get('change_password'));

```

## Custom Fields

**Creating Custom Fields:**

- Extend `Filament\\Forms\\Components\\Field`
- Custom rendering logic
- Supports validation and state management
- Reusable components

**Example Code:**

```php

use Filament\\Forms\\Components\\Field;

class CustomField extends Field

{

Â  Â  protected string $view = 'forms.components.custom-field';

Â  Â  public function getState(): mixed

Â  Â  {

Â  Â  Â  Â  return $this->evaluate($this->state);

Â  Â  }

Â  Â  protected function setUp(): void

Â  Â  {

Â  Â  Â  Â  parent::setUp();

Â  Â  Â  Â  $this->afterStateHydrated(function ($state) {

Â  Â  Â  Â  Â  Â  // Custom state handling logic

Â  Â  Â  Â  });

Â  Â  }

}

```

## Best Practices

### Performance Optimization

- Use appropriate database queries
- Avoid N+1 query problems
- Use conditional rendering reasonably
- Cache complex calculations

### User Experience

- Provide clear labels and descriptions
- Use appropriate icons and colors
- Ensure responsive design
- Provide useful validation messages

### Security

- Implement appropriate permission checks
- Validate all user input
- Protect sensitive data
- Use CSRF protection

### Code Organization

- Use appropriate namespaces
- Follow PSR standards
- Keep code clean
- Add appropriate comments

---

**Previous:** [Part 2: Table System](https://www.notion.so/phmemo/FILAMENT-02-TABLES.md)

**Next:** [Part 4: Infolists](https://www.notion.so/phmemo/FILAMENT-04-INFOLISTS.md)